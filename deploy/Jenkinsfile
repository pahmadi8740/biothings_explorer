pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && aws && build && bte' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    environment {
        IMAGE_NAME = "853771734544.dkr.ecr.us-east-1.amazonaws.com/translator-bte"
        DOCKER_REPO_NAME = "translator-bte"
        KUBERNETES_BLUE_CLUSTER_NAME = "translator-eks-ci-blue-cluster"
        KUBERNETES_GREEN_CLUSTER_NAME = "translator-eks-ci-green-cluster"
        NAMESPACE = "bte"
        CONFIG_JSON_CONFIGMAP = "config"
    }
    stages {
      stage('Build Version'){
          when { expression { return !params.BUILD_VERSION } }
          steps{
              script {
                  BUILD_VERSION_GENERATED = VersionNumber(
                      versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                      projectStartDate:    '1970-01-01',
                      skipFailedBuilds:    true)
                  currentBuild.displayName = BUILD_VERSION_GENERATED
                  env.BUILD_VERSION = BUILD_VERSION_GENERATED
                  env.BUILD = 'true'
              }
          }
      }
      stage('Checkout source code') {
          steps {
              cleanWs()
              checkout scm
          }
      }
      stage('Build and Push Docker Image') {
         when { expression { return env.BUILD == 'true' }}
          steps {
            script {
                docker.build(env.IMAGE_NAME, " --build-arg debug=1 --no-cache .")
                sh '''
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin  853771734544.dkr.ecr.us-east-1.amazonaws.com
                '''
                docker.image(env.IMAGE_NAME).push("${BUILD_VERSION}")
            }
          }
      } 
      stage('Deploy to AWS EKS Blue') {
           agent {
                label 'translator && ci && deploy'
           }
          steps {
              cleanWs()
              checkout scm
              configFileProvider([
                  configFile(fileId: 'values-bte.yaml', targetLocation: 'values-bte.yaml'),
                  configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
              ]){
                  script {
                      sh '''
                      aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_BLUE_CLUSTER_NAME}
                      /bin/bash prepare.sh
                      cd deploy && /bin/bash deploy.sh
                      '''
                    }
                }
            }
      } 
      stage('Clean Up') {
          steps {
              cleanWs()
          }
      }
    }
}